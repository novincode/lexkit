#!/usr/bin/env tsx

import fs from 'fs'
import path from 'path'
import { codeToHtml } from 'shiki'

interface ExampleFile {
  name: string
  component: string
  css?: string
  description: string
}

interface GeneratedRegistry {
  examples: Record<string, {
    name: string
    description: string
    component: string
    css?: string
  }>
  lastGenerated: string
}

/**
 * Build-time code registry generator
 * This script scans all example files and generates a static registry
 * that can be imported directly without runtime processing
 */
class CodeRegistryGenerator {
  private examplesDir: string
  private outputDir: string

  constructor() {
    this.examplesDir = path.resolve(process.cwd(), 'app/docs/(docs)/introduction/examples')
    this.outputDir = path.resolve(process.cwd(), 'lib/generated')
  }

  /**
   * Ensure output directory exists
   */
  private ensureOutputDir(): void {
    if (!fs.existsSync(this.outputDir)) {
      fs.mkdirSync(this.outputDir, { recursive: true })
    }
  }

  /**
   * Scan and discover all example files
   */
  private discoverExamples(): ExampleFile[] {
    const files = fs.readdirSync(this.examplesDir)
    const examples = new Map<string, { component?: string; css?: string }>()

    // Group files by example name
    files.forEach(file => {
      const ext = path.extname(file)
      const name = path.basename(file, ext)

      if (!examples.has(name)) {
        examples.set(name, {})
      }

      const example = examples.get(name)!
      if (ext === '.tsx') {
        example.component = file
      } else if (ext === '.css') {
        example.css = file
      }
    })

    // Convert to ExampleFile array
    return Array.from(examples.entries())
      .filter(([_, files]) => files.component) // Only include examples with components
      .map(([name, files]) => ({
        name,
        component: files.component!,
        css: files.css,
        description: this.getDescription(name)
      }))
  }

  /**
   * Get description for example
   */
  private getDescription(name: string): string {
    const descriptions: Record<string, string> = {
      'BasicEditorExample': 'Simple editor with basic formatting features like bold, italic, lists, and undo/redo',
      'AdvancedFeaturesExample': 'Advanced editor with comprehensive formatting options, custom extensions, and rich text capabilities',
      'ThemedEditorExample': 'Editor with custom theming support, dark mode, and complete visual customization'
    }
    return descriptions[name] || `${this.formatName(name)} example`
  }

  /**
   * Format example name for display
   */
  private formatName(filename: string): string {
    return filename
      .replace(/([A-Z])/g, ' $1')
      .replace(/^./, str => str.toUpperCase())
      .trim()
  }

  /**
   * Process code file with Shiki
   */
  private async processCodeFile(filePath: string, language: string): Promise<string> {
    const fullPath = path.resolve(this.examplesDir, filePath)
    const content = fs.readFileSync(fullPath, 'utf-8')

    return await codeToHtml(content, {
      lang: language,
      theme: 'github-dark'
    })
  }

  /**
   * Generate the static registry
   */
  async generateRegistry(): Promise<void> {
    console.log('üîç Scanning example files...')

    const examples = this.discoverExamples()
    console.log(`üìÅ Found ${examples.length} examples:`, examples.map(e => e.name))

    const registry: GeneratedRegistry = {
      examples: {},
      lastGenerated: new Date().toISOString()
    }

    // Process each example
    for (const example of examples) {
      console.log(`‚öôÔ∏è  Processing ${example.name}...`)

      const exampleData: any = {
        name: this.formatName(example.name),
        description: example.description
      }

      // Process component file
      if (example.component) {
        exampleData.component = await this.processCodeFile(example.component, 'tsx')
      }

      // Process CSS file if exists
      if (example.css) {
        exampleData.css = await this.processCodeFile(example.css, 'css')
      }

      registry.examples[example.name] = exampleData
    }

    // Generate TypeScript file
    this.ensureOutputDir()
    const outputPath = path.join(this.outputDir, 'code-registry.ts')

    const tsContent = `// Auto-generated code registry - DO NOT EDIT MANUALLY
// Generated on: ${registry.lastGenerated}
// This file is generated by scripts/generate-registry.ts

export interface ExampleData {
  name: string
  description: string
  component: string
  css?: string
}

export interface CodeRegistry {
  examples: Record<string, ExampleData>
  lastGenerated: string
}

const registry: CodeRegistry = ${JSON.stringify(registry, null, 2)}

export default registry

// Helper functions
export function getExample(name: string): ExampleData | undefined {
  return registry.examples[name]
}

export function getAllExamples(): ExampleData[] {
  return Object.values(registry.examples)
}

export function getExampleNames(): string[] {
  return Object.keys(registry.examples)
}
`

    fs.writeFileSync(outputPath, tsContent)
    console.log(`‚úÖ Registry generated successfully at: ${outputPath}`)
    console.log(`üìä Generated ${Object.keys(registry.examples).length} examples`)
  }
}

// Run the generator
async function main() {
  try {
    console.log('üöÄ Starting code registry generation...')
    const generator = new CodeRegistryGenerator()
    await generator.generateRegistry()
    console.log('‚úÖ Code registry generation completed!')
  } catch (error) {
    console.error('‚ùå Registry generation failed:', error)
    process.exit(1)
  }
}

main()
